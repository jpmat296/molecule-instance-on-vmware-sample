---
- name: Create
  hosts: localhost
  connection: local
  gather_facts: false
  no_log: "{{ not (lookup('env', 'MOLECULE_DEBUG') | bool or molecule_yml.provisioner.log
              | default(false) | bool) }}"
  vars:
    keypair_path: "{{ lookup('env','MOLECULE_EPHEMERAL_DIRECTORY') }}/ssh_key"
  tasks:
    - name: Generate SSH keypair
      community.crypto.openssh_keypair:
        path: "{{ keypair_path }}"
      register: keypair_result

    - name: Create molecule instance(s).
      vmware_guest:
        hostname: "{{ molecule_yml.driver.hostname }}"
        username: "{{ molecule_yml.driver.username }}"
        password: "{{ molecule_yml.driver.password }}"
        validate_certs: "{{ molecule_yml.driver.validate_certs | default(false) }}"
        datacenter: "{{ molecule_yml.driver.datacenter }}"
        esxi_hostname: "{{ molecule_yml.driver.esxi_hostname }}"
        folder: "{{ molecule_yml.driver.folder }}"
        name: "{{ item.name }}"
        template: "{{ item.template }}"
        snapshot_src: "{{ item.snapshot_src }}"
        linked_clone: true
        hardware:
          memory_mb: "{{ item.memory_mb }}"
          num_cpus: "{{ item.cpus }}"
        networks:
          - name: "{{ item.network }}"
        datastore: "{{ item.datastore }}"
        customization:
          hostname: "{{ item.name }}"
        wait_for_ip_address: true
        wait_for_customization: true
        state: poweredon
      register: server
      with_items: "{{ molecule_yml.platforms }}"

    - name: Create ssh directory and public key in guest vm.
      vmware_vm_shell:
        hostname: "{{ molecule_yml.driver.hostname }}"
        username: "{{ molecule_yml.driver.username }}"
        password: "{{ molecule_yml.driver.password }}"
        validate_certs: "{{ molecule_yml.driver.validate_certs | default(false) }}"
        datacenter: "{{ molecule_yml.driver.datacenter }}"
        folder: "{{ molecule_yml.driver.folder }}"
        vm_id: "{{ item.name }}"
        vm_username: "{{ molecule_yml.driver.vm_username }}"
        vm_password: "{{ molecule_yml.driver.vm_password }}"
        vm_shell: /bin/bash
        vm_shell_args: "-c 'mkdir -p ~/.ssh && chmod 700 ~/.ssh
                        && echo {{ keypair_result.public_key }} > ~/.ssh/authorized_keys'"
        wait_for_process: true
      with_items: "{{ molecule_yml.platforms }}"

    - name: Populate instance config dict.
      set_fact:
        instance_conf_dict: {
          'instance': "{{ item.item.name }}",
          'address': "{{ item.instance.ipv4 }}",
          'user': "{{ molecule_yml.driver.vm_username }}",
          'port': 22,
          'identity_file': "{{ keypair_path }}"
        }
      with_items: "{{ server.results }}"
      register: instance_config_dict
      when: server is changed

    - name: Convert instance config dict to a list.
      set_fact:
        instance_conf: "{{ instance_config_dict.results
                           | map(attribute='ansible_facts.instance_conf_dict') | list }}"
      when: server is changed

    - name: Dump instance config.
      copy:
        # NOTE(retr0h): Workaround for Ansible 2.2.
        #               https://github.com/ansible/ansible/issues/20885
        content: "{{ instance_conf | to_json | from_json | to_yaml }}"
        dest: "{{ molecule_instance_config }}"
        mode: 0644
      when: server is changed
